#!/usr/bin/python

import commands

from forward import *
from service import *

class SFWError:
    message = None
    def __init__(self, message):
        self.message = message

class SFW:

    options = { \
            "nat":  False, \
            "icmp": False, \
            "icmp_rate": None, \
            "if_wan": ["eth0"], \
            "if_lan": None, \
            "rc": True, \
            "rc_path": "/etc/init.d/iptables", \
            }

    services = []
    forwards = []

    def __init__(self):
        return

    def setopt(self, opt, value):
        if self.options.has_key(opt):
            self.options[opt] = value
        else:
            raise "Option %s does not exist!" % (opt)

    def getopt(self, opt):
        if self.options.has_key(opt):
            return self.options[opt]
        else:
            raise "Option %s does not exist!" % (opt)

    def enable_nat(self):
        self.setopt("nat", True)

    def disable_nat(self):
        self.setopt("nat", False)

    def enable_icmp(self):
        self.setopt("icmp", True)

    def disable_icmp(self):
        self.setopt("icmp", False)

    def wan_interfaces(self, ifstr):
        if not ifstr:
            self.setopt("if_wan", None)
        else:
            ifs = ifstr.split(",")
            il = []
            for i in ifs:
                if i and not i in il:
                    il.append(i)
            self.setopt("if_wan", il)

    def lan_interfaces(self, ifstr):
        if not ifstr:
            self.setopt("if_lan", None)
        else:
            ifs = ifstr.split(",")
            il = []
            for i in ifs:
                if i and not i in il:
                    il.append(i)
            self.setopt("if_lan", il)

    def addservice(self, params, desc):
        self.services.append(Service(params, desc))

    def addforward(self, params, desc):
        self.forwards.append(Forward(params, desc))
    
    def checkconflicts(self):
        if not self.getopt("if_wan"):
            raise SFWError, "No WAN interfaces specified!"
        
        for i in self.getopt("if_wan"):
            if self.getopt("if_lan") and i in self.getopt("if_lan"):
                raise SFWError, "Interface %s defined as WAN and LAN!" % (i)

        if (self.getopt("nat") or self.forwards) \
                and int(commands.getoutput('cat /proc/sys/net/ipv4/ip_forward')) == 0:
            raise SFWError, "You do not have forwarding enabled in your kernel - NAT and \
forwarding rules will not work.\nTry 'echo 1 > /proc/sys/net/ipv4/ip_forward' \
to enable it"

    def makescript(self):
        self.checkconflicts()

        output = []
        output.append('#!/bin/bash')
        output.append('#')
        output.append('# Firewall generated by Simple FireWall Generator - http://thev0id.net/projects/sfwg')
        output.append('')

        # rc/init.d script stuff
        if self.getopt("rc"):
            rc = self.getopt("rc_path")
            output.append('# Stop iptables')
            output.append("%s stop" % (rc))
            output.append('')

        # Clear the existing rules
        output.append('# Clear existing rules')
        output.append('iptables -F')
        output.append('iptables -t nat -F')
        output.append('')

        # Set default policies
        output.append('# Set default policies')
        output.append('iptables -P INPUT DROP')
        output.append('iptables -P FORWARD DROP')
        output.append('iptables -P OUTPUT ACCEPT')
        output.append('')

        # Essential rules to make sure things actually work
        output.append('# Allow local connections - everything dies if this isn\'t here!')
        output.append('iptables -A INPUT -i lo -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT')
        output.append('# Allow packets for all established connections')
        output.append('iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT')
        output.append('')

        # Allow all connections from LAN interfaces
        if self.getopt("if_lan"):
            output.append('# Allow all connections from LAN (trusted) interfaces')
            for i in self.getopt("if_lan"):
                output.append('iptables -A INPUT -i %s -j ACCEPT' % (i))
            output.append('')

        # Allow forwarding from LAN interfaces
        if self.getopt("if_lan"):
            output.append('# Allow forwarding from LAN interfaces')
            for i in self.getopt("if_lan"):
                output.append('iptables -A FORWARD -i %s -j ACCEPT' % (i))
            output.append('# Allow forwarding for established connections')
            output.append('iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT')
            output.append('')

        # Allow ICMP packets from WAN interfaces
        if self.getopt("icmp"):
            if self.getopt("icmp_rate"):
                output.append('# Allow ICMP packets from WAN interfaces (rate-limited)')
                for i in self.getopt("if_wan"):
                    output.append('iptables -A INPUT -i %s -p icmp -m recent --set' % (i))
                    output.append(\
                            'iptables -A INPUT -i %s -p icmp -m recent --update --seconds 60 --hitcount %s -j DROP' \
                            % (i, self.getopt("icmp_rate")))
                    output.append('iptables -A INPUT -i %s -p icmp -j ACCEPT' % (i))
            else:
                output.append('# Allow ICMP packets from WAN interfaces')
                for i in self.getopt("if_wan"):
                    output.append('iptables -A INPUT -i %s -p icmp -j ACCEPT' % (i))
            output.append('')

        if self.services:
            output.append('')
            output.append('# *****   SERVICES   *****')
            output.append('')
            for s in self.services:
                output.extend(s.getrule())
            output.append('# ************************')
            output.append('')
        
        if self.forwards:
            output.append('')
            output.append('# *****  FORWARDING  *****')
            output.append('')
            for f in self.forwards:
                output.extend(f.getrule(self.getopt("if_wan")))
            output.append('# ************************')
            output.append('')
            output.append('')

        # Outgoing NAT
        if self.getopt("nat"):
            output.append('# Outgoing NAT masquerading')
            for i in self.getopt("if_wan"):
                output.append("iptables -t nat -A POSTROUTING -o %s -j MASQUERADE" % (i))
            output.append('')

        # more rc/init.d script stuff
        if self.getopt("rc"):
            rc = self.getopt("rc_path")
            output.append('# Save config and start iptables')
            output.append("%s save" % (rc))
            output.append("%s start" % (rc))
            output.append('')

        return "\n".join(output)

